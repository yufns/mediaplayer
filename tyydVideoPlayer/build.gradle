apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'


android {

    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.androidCompileSdkVersion
    buildToolsVersion globalConfiguration.androidBuildToolsVersion

    defaultConfig {

        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion

        versionCode 1
        versionName "1.0"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api project(':gsyVideoPlayer-java')
    api project(':gsyVideoPlayer-exo_player2')
    //api project(':gsyVideoPlayer-armv5')
    //api project(':gsyVideoPlayer-armv7a')
    //api project(':gsyVideoPlayer-armv64')
    //api project(':gsyVideoPlayer-x86')
    //api project(':gsyVideoPlayer-x86_64')

    //更多配置版so，增加了concat,rtsp,mpeg，crypto
    //api project(':gsyVideoPlayer-ex_so')

    //api "com.shuyu:GSYVideoPlayer:$gsyVideoVersion"

    //api "com.shuyu:gsyVideoPlayer-java:$gsyVideoVersion"
    //api "com.shuyu:GSYVideoPlayer-exo2:$gsyVideoVersion"
    api project(':gsyVideoPlayer-armv5')
    api project(':gsyVideoPlayer-armv7a')
    api project(':gsyVideoPlayer-armv64')
    api project(':gsyVideoPlayer-x86')
    api project(':gsyVideoPlayer-x86_64')

    //更多配置版so，增加了concat,rtsp,mpeg，crypto
    //api "com.shuyu:gsyVideoPlayer-ex_so:$gsyVideoVersion"

}


// 项目引用的版本号，比如compile 'com.yanzhenjie:andserver:1.0.1'中的1.0.1就是这里配置的。
version = "1.0.1"
// 定义两个链接，下面会用到。
def siteUrl = 'https://github.com/yufns/mediaplayer' // 项目主页。
def gitUrl = 'git@github.com:yufns/mediaplayer.git' // Git仓库的url。
// 唯一包名，比如compile 'com.yanzhenjie:andserver:1.0.1'中的com.yanzhenjie就是这里配置的。
group = "com.tyyd"
install {
    repositories.mavenInstaller{
        // 生成pom.xml和参数
        pom{
            project {
                packaging 'aar'
                // 项目描述，复制我的话，这里需要修改。
                name 'mediaplayer For Android'// 可选，项目名称。
                description 'The Android build the framework of the media player.'// 可选，项目描述。
                url siteUrl // 项目主页，这里是引用上面定义好。
                // 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                //填写开发者基本信息，复制我的，这里需要修改。
                developers {
                    developer {
                        id 'championhu' // 开发者的id。
                        name 'championhu' // 开发者名字。
                        email 'erichu1208@gmail.com' // 开发者邮箱。
                    }
                }

                // SCM，复制我的，这里不需要修改。
                scm {
                    connection gitUrl // Git仓库地址。
                    developerConnection gitUrl // Git仓库地址。
                    url siteUrl // 项目主页。
                }
            }
        }
    }
}

// 生成jar包的task，不需要修改。
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
// 生成jarDoc的task，不需要修改。
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // destinationDir = file("../javadoc/")
    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过。
}
// 生成javaDoc的jar，不需要修改。
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user") // Bintray的用户名。
    key = properties.getProperty("bintray.apikey") // Bintray刚才保存的ApiKey。

    configurations = ['archives']
    pkg {
        repo = "maven"  // 上传到maven库。（这里要特别注意，如果写了maven报404错误，请在bintray创建一个仓库，这里填改成你创建的仓库的名字，如何创建请看下图。）
        name = "tyyd"  // 发布到Bintray上的项目名字，这里的名字不是compile 'com.yanzhenjie:andserver:1.0.1'中的andserver。
        userOrg = 'champion' // Bintray的用户名，2016年11月更新。
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true // 是否是公开项目。
    }
}



